# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# == R E L O A D daemon ===
hyper - 0: launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"
hyper - 9: brew services restart sketchybar


# == R E S I Z E Windows ===
hyper - f : yabai -m window --toggle zoom-fullscreen
hyper - o: yabai -m window --resize left:-20:0
hyper - p: yabai -m window --resize left:20:0
hyper - l: yabai -m window --resize right:-20:0
hyper - 0x29: yabai -m window --resize right:20:0   #0x29 is ;

#   Toggle float and move it to middle of screen
hyper - t: yabai -m window --toggle float; yabai -m window --grid 1:8:1:7:6:1; sketchybar -m --trigger float_change

# === M O V E Window ===
hyper - i: ~/.config/yabai/moveWindowRightAndFollowFocus.sh
hyper - a : yabai -m space --mirror y-axis
hyper - r: yabai -m space --rotate 90
hyper - x: yabai -m window --toggle float; yabai -m window --grid 1:2:1:2:1:1 ;sketchybar -m --trigger float_change
hyper - z: yabai -m window --toggle float; yabai -m window --grid 1:2:0:2:1:1 ;sketchybar -m --trigger float_change
hyper - right: yabai -m window --swap east
hyper - left: yabai -m window --swap west
hyper - up: yabai -m window --swap north
hyper - down: yabai -m window --swap south

# === F O C U S Window ===
hyper - 0x1E: yabai -m window --focus next  #0x1E is ]
hyper - 0x21: yabai -m window --focus prev  #0x21 is [


# == Stacking Windows ==
# cmd + ctrl - left  : yabai -m window west --stack $(yabai -m query --windows --window | jq -r '.id')
# cmd + ctrl - down  : yabai -m window south --stack $(yabai -m query --windows --window | jq -r '.id')
# cmd + ctrl - up    : yabai -m window north --stack $(yabai -m query --windows --window | jq -r '.id')
# cmd + ctrl - right : yabai -m window east --stack $(yabai -m query --windows --window | jq -r '.id')
# hyper - e : yabai -m window --focus stack.next
# hyper - r : yabai -m window --focus stack.prev
# hyper - 7 : yabai -m window --warp $(yabai -m query --windows --window | jq -r '.id')
